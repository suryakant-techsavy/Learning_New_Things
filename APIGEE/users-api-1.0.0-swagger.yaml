openapi: 3.0.0

info:
  description: This is a Spec file Users API. This is just a demo for the Apigee course
  version: "1.0.0"
  title: Users API
  contact:
    email: sanjay.bharatiya@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

servers:
# Added by API Auto Mocking Plugin
  - description: Users API Mock Server
    url: https://virtserver.swaggerhub.com/bharatiyas/users-api/1.0.0
  
  
tags:
  - name: users
    description: Manage Users for the System

paths:
  /v1/users:
    post:
      security: 
        - basicAuthentication: []
      tags:
        - users
      summary: Register a new user
      operationId: registerUser
      responses:
        '201':
          description: Register a new User
        '401':
          $ref: '#/components/responses/UnauthorizedError'  
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    get:
      security: 
        - basicAuthentication: []
      tags:
        - users
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: User found by the supplied ID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'   
              
  /v1/users/{userId}:
    get:
      security: 
        - basicAuthentication: []
      tags:
        - users
      summary: Gets the details of the user by ID. 
      description: Returns the details of the user
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found by the supplied ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'        
        '500':
          description: Internal Server Error
          
components:
  securitySchemes:
    basicAuthentication:
      type: http
      scheme: basic
  schemas:
   User:
      type: object
      properties:
        userId:
          type: string
          example: "1234456"
        firstName:
          type: string
          example: "Johnny"
        lastName:
          type: string
          example: "Smithh"
        dateOfBirth:
          type: string
          format: date
          example: '2000-01-20'
        gender:
          $ref: '#/components/schemas/Gender'
   Gender:
      enum:
        - Male
        - Female
        - Undisclosed
  responses:      
   UnauthorizedError:
      description: Authentication information is missing or invalid.
      headers:
        WWW_Authenticate:
          schema:
            type: string
      content:
        body:
          example: "Basic Authentication required. Please authenticate."